import pandas as pd
import os
import configparser
import re
import glob
from datetime import datetime
#–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º–æ–º–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∫–ª–∞—Å—Å –¥–ª—è –ë–î (pgdb.py)
from pgdb import PGDataBase 


#–ø—É—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
current_dir = os.path.dirname(__file__)
parent_dir = os.path.dirname(current_dir)

#—Ä–∞–±–æ—Ç–∞–µ–º —Å config
config = configparser.ConfigParser()
config.read(os.path.join(current_dir,'config.ini'))
DATABASE_ = config['DataBase']

#—Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ data –¥–ª—è –∑–∞–≥—É–∑–∫–∏ –≤ –ë–î


# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
DATA_DIR = os.path.join(parent_dir, "data")

# –®–∞–±–ª–æ–Ω –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ‚Äî 12_3.csv, 1_1.csv –∏ —Ç.–¥.
FILENAME_PATTERN = re.compile(r'^(\d+)_(\d+)\.csv$')

# –ò—â–µ–º –≤—Å–µ .csv —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
csv_files = glob.glob(os.path.join(DATA_DIR, "*.csv"))

# –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –∏–º–µ–Ω–∏
valid_files = [f for f in csv_files if FILENAME_PATTERN.match(os.path.basename(f))]

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö DataFrame'–æ–≤
dataframes = []

for filepath in valid_files:
    filename = os.path.basename(filepath)
    match = FILENAME_PATTERN.match(filename)
    shop_num = int(match.group(1))
    cash_num = int(match.group(2))

    df = pd.read_csv(filepath)

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    df["shop_num"] = shop_num
    df["cash_num"] = cash_num
    df["load_date"] = datetime.today().date()

    dataframes.append(df)
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: {filename}")
    
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚Äî –ø–µ—Ä–µ–º–µ—Å—Ç–∏–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤
    archive_dir = os.path.join(parent_dir, "archive")
    os.makedirs(archive_dir, exist_ok=True)

    archived_path = os.path.join(archive_dir, filename)
    os.replace(filepath, archived_path)
    print(f"üìÅ –ü–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∞—Ä—Ö–∏–≤: {archived_path}")


# –û–±—ä–µ–¥–∏–Ω—è–µ–º
if dataframes:
    all_data = pd.concat(dataframes, ignore_index=True)
    print(f"üì¶ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {len(all_data)}")
else:
    all_data = pd.DataFrame().reset_index()
    print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")


#—Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
database = PGDataBase(
    host=DATABASE_['HOST'],   
    port=DATABASE_['PORT'],
    database=DATABASE_['DATABASE'],
   user=DATABASE_['USER'],
   password=DATABASE_['PASSWORD']
)

#—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ –ë–î –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—á–∫–∏
for i, row in all_data.iterrows():
    query = """
        INSERT INTO sales (
            doc_id, item, category, amount, price, discount, shop_num, cash_num, load_date
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
    """
    values = (
        row['doc_id'],
        row['item'],
        row['category'],
        int(row['amount']),
        float(row['price']),
        float(row['discount']),
        int(row['shop_num']),
        int(row['cash_num']),
        row['load_date']
    )
    database.post(query, values)
    